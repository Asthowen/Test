name: Generate executables and post them to release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  generate-executables:
    name: Generation of Linux executables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl

      - name: Install dependencies
        id: install_dependencies
        run: |
          cargo install cargo-get && cargo clean
          echo "::set-output name=APP_VERSION::$(cargo get version)"

      - name: Get release
        id: get_release
        uses: leahlundqvist/get-release@v1.3.1
        with:
          tag_name: ${{ steps.install_dependencies.outputs.APP_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Build Linux x86_64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-unknown-linux-musl
          use-cross: true

      - name: Upload Linux x86_64 executable to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-musl/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-x86_64-linux
          asset_content_type: application/octet-stream

      - name: Build Linux aarch64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target aarch64-unknown-linux-musl
          use-cross: true

      - name: Upload Linux aarch64 executable to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-musl/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-aarch64-linux
          asset_content_type: application/octet-stream

      - name: Build Linux arm
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target arm-unknown-linux-musleabi
          use-cross: true

      - name: Upload Linux arm executable to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/arm-unknown-linux-musleabi/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-arm-linux
          asset_content_type: application/octet-stream

  generate-executable-macos:
    runs-on: macos-latest
    name: Generation of MacOS executables
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true

      - name: Install dependencies
        id: install_dependencies
        run: |
          cargo install cargo-get
          echo "::set-output name=APP_VERSION::$(cargo get version)"

      - name: Get release
        id: get_release
        uses: leahlundqvist/get-release@v1.3.1
        with:
          tag_name: ${{ steps.install_dependencies.outputs.APP_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Build MacOS x86_64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
          use-cross: true

      - name: Upload MacOS x86_64 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-x86_64-macos
          asset_content_type: application/octet-stream

      - name: Build MacOS aarch64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target aarch64-apple-darwin
          use-cross: true

      - name: Upload MacOS aarch64 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/aarch64-apple-darwin/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-aarch64-macos
          asset_content_type: application/octet-stream

      - name: Build MacOS i686
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target i686-apple-darwin
          use-cross: true

      - name: Upload MacOS i686 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/i686-apple-darwin/release/asthobin
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-i686-macos
          asset_content_type: application/octet-stream

  generate-executable-windows:
    runs-on: windows-latest
    name: Generation of Windows executables
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          default: true

      - name: Install dependencies
        id: install_dependencies
        run: |
          rustup target add x86_64-pc-windows-msvc && rustup toolchain install stable-x86_64-pc-windows-msvc
          rustup target add i686-pc-windows-msvc && rustup toolchain install stable-i686-pc-windows-msvc
          rustup target add aarch64-pc-windows-msvc && rustup toolchain install stable-aarch64-pc-windows-msvc
          cargo install cargo-get && cargo clean
          echo "::set-output name=APP_VERSION::$(cargo get version)"

      - name: Get release
        id: get_release
        uses: leahlundqvist/get-release@v1.3.1
        with:
          tag_name: ${{ steps.install_dependencies.outputs.APP_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Build Windows x86_64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target x86_64-pc-windows-msvc
          use-cross: false

      - name: Upload Windows x86_64 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/x86_64-pc-windows-msvc/release/asthobin.exe
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-x86_64-windows.exe
          asset_content_type: application/octet-stream

      - name: Build Windows i686
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target i686-pc-windows-msvc
          use-cross: false

      - name: Upload Windows i686 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/i686-pc-windows-msvc/release/asthobin.exe
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-i686-windows.exe
          asset_content_type: application/octet-stream

      - name: Build Windows aarch64
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target aarch64-pc-windows-msvc
          use-cross: false

      - name: Upload Windows aarch64 to releases
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/aarch64-pc-windows-msvc/release/asthobin.exe
          asset_name: asthobin-${{ steps.install_dependencies.outputs.APP_VERSION }}-aarch64-windows.exe
          asset_content_type: application/octet-stream